module.exports = {
    parser: "babel-eslint",
    ecmaFeatures: {
        jsx: true,
    },
    env: {
        browser: true,
        node: true,
        es6: true
    },
    extends: [
        "eslint:recommended",
        "plugin:react/all"
    ],
    parserOptions: {
        ecmaVersion: 6,
        sourceType: 'module',
        ecmaFeatures: {
            generators: false,
            objectLiteralDuplicateProperties: false,
            jsx: true
        }
    },
    plugins: [
        'react',
        'import'
    ],
    rules: {
        "arrow-body-style": 0,
        'array-bracket-spacing': ['error', 'never'],
        'array-callback-return': 'error',
        'arrow-parens': ['error', 'as-needed', { requireForBlockBody: true }],
        'arrow-spacing': ['error', { before: true, after: true }],
        'block-scoped-var': 'error',
        'block-spacing': ['error', 'always'],
        'brace-style': ['error', '1tbs', { allowSingleLine: true }],
        camelcase: ['error', { properties: 'never' }],
        'class-methods-use-this': ['error', {
            exceptMethods: [
                'render',
                'getInitialState',
                'getDefaultProps',
                'getChildContext',
                'componentWillMount',
                'componentDidMount',
                'componentWillReceiveProps',
                'shouldComponentUpdate',
                'componentWillUpdate',
                'componentDidUpdate',
                'componentWillUnmount',
            ],
        }],
        'comma-dangle': ['warn', 'never'],
        'comma-spacing': ['error', { before: false, after: true }],
        'comma-style': ['error', 'last'],
        'computed-property-spacing': ['error', 'never'],
        'consistent-return': 'error',
        'curly': ['error', 'multi-line'],
        'default-case': ['error', { commentPattern: '^no default$' }],
        'dot-location': ['error', 'property'],
        'dot-notation': ['error', { allowKeywords: true }],
        eqeqeq: ['error', 'allow-null'],
        'eol-last': ['error', 'always'],
        'func-call-spacing': ['error', 'never'],
        "func-names": 0,
        'generator-star-spacing': ['error', { before: false, after: true }],
        'global-require': 'error',
        'guard-for-in': 'error',
        'import/export': 'error',
        'import/extensions': ['error', 'always', {
            js: 'never',
            jsx: 'never',
        }],
        'import/first': ['error', 'absolute-first'],
        'import/newline-after-import': 'error',
        'import/no-absolute-path': 'error',
        'import/no-amd': 'error',
        'import/no-duplicates': 'error',
        'import/no-dynamic-require': 'error',
        'import/no-extraneous-dependencies': ['error', {
            devDependencies: [
                'spec/**',
                'test/**',
                'tests/**',
                '**/__tests__/**',
                '**/webpack.config.js',
                '**/webpack.config.*.js',
                '**/rollup.config.js',
                '**/gulpfile.js',
                '**/Gruntfile',
            ],
            optionalDependencies: false,
        }],
        'import/no-mutable-exports': 'error',
        'import/no-named-as-default': 'error',
        'import/no-named-as-default-member': 'error',
        'import/no-named-default': 'error',
        'import/no-webpack-loader-syntax': 'error',
        'import/prefer-default-export': 'error',
        "indent": ['warn', 4, { SwitchCase: 1, VariableDeclarator: 1, outerIIFEBody: 1 }],
        'jsx-quotes': ['error', 'prefer-double'],
        'key-spacing': ['error', { beforeColon: false, afterColon: true }],
        'keyword-spacing': ['error', {
            before: true,
            after: true,
            overrides: {
                return: { after: true },
                throw: { after: true },
                case: { after: true }
            }
        }],
        "linebreak-style": 0,
        'lines-around-directive': ['error', {
            after: 'always',
            before: 'always',
        }],
        "max-len": 0,
        'new-cap': ['error', {
            capIsNew: false,
            capIsNewExceptions: ['Immutable.Map', 'Immutable.Set', 'Immutable.List'],
            newIsCap: true,
            newIsCapExceptions: [],
        }],
        'new-parens': 'error',
        'newline-per-chained-call': ['error', { ignoreChainWithDepth: 4 }],
        'no-alert': 'warn',
        'no-array-constructor': 'error',
        'no-bitwise': 'error',
        'no-caller': 'error',
        'no-confusing-arrow': 0,
        'no-console': 0,
        'no-continue': 'error',
        'no-duplicate-imports': 'error',
        'no-else-return': 'error',
        'no-empty-function': ['error', {
            allow: [
                'arrowFunctions',
                'functions',
                'methods',
            ]
        }],
        'no-eval': 'error',
        'no-extend-native': 'error',
        'no-extra-bind': 'error',
        'no-extra-label': 'error',
        'no-floating-decimal': 'error',
        'no-global-assign': ['error', { exceptions: [] }],
        'no-implied-eval': 'error',
        'no-iterator': 'error',
        'no-label-var': 'error',
        'no-labels': ['error', { allowLoop: false, allowSwitch: false }],
        'no-lone-blocks': 'error',
        'no-lonely-if': 'error',
        'no-loop-func': 'error',
        'no-mixed-operators': ['error', {
            groups: [
                ['+', '-', '*', '/', '%', '**'],
                ['&', '|', '^', '~', '<<', '>>', '>>>'],
                ['==', '!=', '===', '!==', '>', '>=', '<', '<='],
                ['&&', '||'],
                ['in', 'instanceof']
                ],
            allowSamePrecedence: true
        }],
        'no-multiple-empty-lines': ['error', { max: 2, maxEOF: 1 }],
        'no-multi-spaces': 'error',
        'no-multi-str': 'error',
        'no-nested-ternary': 0,
        'no-new': 'error',
        'no-new-func': 'error',
        'no-new-object': 'error',
        'no-new-require': 'error',
        'no-new-wrappers': 'error',
        'no-octal-escape': 'error',
        'no-param-reassign': 0,
        'no-path-concat': 'error',
        'no-plusplus': 'error',
        'no-proto': 'error',
        'no-prototype-builtins': 'error',
        'no-restricted-properties': ['error',
            {
                object: 'arguments',
                property: 'callee',
                message: 'arguments.callee is deprecated',
            }, {
                property: '__defineGetter__',
                message: 'Please use Object.defineProperty instead.',
            }, {
                property: '__defineSetter__',
                message: 'Please use Object.defineProperty instead.',
            }, {
                object: 'Math',
                property: 'pow',
                message: 'Use the exponentiation operator (**) instead.',
        }],
        'no-restricted-syntax': [
            'error',
            'ForInStatement',
            'ForOfStatement',
            'LabeledStatement',
            'WithStatement',
        ],
        'no-return-assign': 'error',
        'no-script-url': 'error',
        'no-self-compare': 'error',
        'no-sequences': 'error',
        'no-shadow': 'error',
        'no-shadow-restricted-names': 'error',
        'no-tabs': 'error',
        'no-template-curly-in-string': 'error',
        'no-throw-literal': 'error',
        'no-trailing-spaces': 'error',
        'no-undef-init': 'error',
        "no-underscore-dangle": 0,
        'no-unneeded-ternary': ['error', { defaultAssignment: false }],
        'no-unsafe-negation': 'error',
        'no-unused-expressions': ['error', {allowShortCircuit: true, allowTernary: false}],
        'no-use-before-define': 'error',
        'no-useless-computed-key': 'error',
        'no-useless-concat': 'error',
        'no-useless-constructor': 'error',
        'no-useless-escape': 'error',
        'no-useless-return': 'error',
        'no-useless-rename': ['error', {
            ignoreDestructuring: false,
            ignoreImport: false,
            ignoreExport: false,
        }],
        'no-var': 'error',
        'no-void': 'error',
        'no-whitespace-before-property': 'error',
        'no-with': 'error',
        'object-curly-spacing': ['error', 'always'],
        'object-property-newline': ['error', {
            allowMultiplePropertiesPerLine: true,
        }],
        'object-shorthand': ['error', 'always', {
            ignoreConstructors: false,
            avoidQuotes: true,
        }],
        'one-var': 0,
        'one-var-declaration-per-line': ['error', 'always'],
        'operator-assignment': ['error', 'always'],
        'padded-blocks': ['error', 'never'],
        'prefer-arrow-callback': ['error', {
            allowNamedFunctions: false,
            allowUnboundThis: true,
        }],
        'prefer-const': ['error', {
            destructuring: 'any',
            ignoreReadBeforeAssign: true,
        }],
        'prefer-numeric-literals': 'error',
        'prefer-rest-params': 'error',
        'prefer-spread': 'error',
        'prefer-template': 'error',
        'quote-props': ['error', 'as-needed', { keywords: false, unnecessary: true, numbers: false }],
        quotes: ['error', 'single', { avoidEscape: true }],
        radix: 'error',
        'react/display-name': 0,
        'react/forbid-component-props': 0,
        'react/forbid-prop-types': 0,
        'react/jsx-handler-names': 0,
        'react/jsx-max-props-per-line': 0,
        'react/jsx-no-literals': 0,
        'react/jsx-no-bind': ['warn', { 'ignoreRefs': true }],
        'react/jsx-indent': ['warn', 4],
        'react/jsx-indent-props': ['warn', 4],
        'react/jsx-sort-props': ['off'],
        'react/no-find-dom-node': 0,
        'react/no-is-mounted': 0,
        'react/no-multi-comp': 0,
        'react/no-render-return-value': 0,
        'react/no-set-state': 0,
        'react/no-unused-prop-types': [1, {skipShapeProps: true}],
        'react/prefer-stateless-function': 0,
        'react/require-optimization': 0,
        'react/sort-comp': ['error', {
            order: [
            'static-methods',
            'lifecycle',
            '/^on.+$/',
            '/^(get|set)(?!(InitialState$|DefaultProps$|ChildContext$)).+$/',
            'everything-else',
            '/^render.+$/',
            'render'
            ]
        }],
        'react/sort-prop-types': 0,
        'rest-spread-spacing': ['error', 'never'],
        semi: ['error', 'always'],
        'semi-spacing': ['error', { before: false, after: true }],
        'space-before-blocks': 'error',
        'space-before-function-paren': ['error', {
            anonymous: 'always',
            asyncArrow: 'always',
            named: 'never'
        }],
        'space-in-parens': ['error', 'never'],
        'space-infix-ops': 'error',
        'space-unary-ops': ['error', {
            words: true,
            nonwords: false,
            overrides: {
            },
        }],
        'spaced-comment': ['error', 'always', {
            line: {
                exceptions: ['-', '+'],
                markers: ['=', '!'], // space here to support sprockets directives
                },
                block: {
                    exceptions: ['-', '+'],
                    markers: ['=', '!'], // space here to support sprockets directives
                    balanced: false,
                }
        }],
        "strict": 0,
        'unicode-bom': ['error', 'never'],
        'symbol-description': 'error',
        'template-curly-spacing': 'error',
        'vars-on-top': 'error',
        'wrap-iife': ['error', 'outside', { functionPrototypeMethods: false }],
        'yield-star-spacing': ['error', 'after'],
        yoda: 'error',
    },
    settings: {
        'import/resolver': {
              node: {
                  extensions: ['.js', '.jsx', '.json']
              }
        },
        react: {
            pragma: 'React',
            version: '15.3'
        },
        'import/extensions': [
            '.js',
            '.jsx',
        ],
        'import/core-modules': [],
        'import/ignore': [
            'node_modules',
            '\\.(coffee|scss|css|less|hbs|svg|json)$',
        ],
    }
};
